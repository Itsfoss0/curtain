openapi: 3.0.0
info:
  title: Event Ticketing API
  description: API for an event management system in Node.js - FullstackFusion Event
  version: 1.0.0

servers:
  - url: http://localhost:3001/api/v1
    description: Local development server

paths:
  /status:
    get:
      summary: Get API status
      responses:
        "200":
          description: Server is working OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
        "500":
          description: Server error

  /auth/register:
    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
                name:
                  type: string
                userName:
                  type: string
      responses:
        "201":
          description: User registered successfully
        "400":
          description: Invalid request data

  /auth/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: User logged in successfully
        "401":
          description: Invalid credentials
        "404":
          description: No user with such email exists

  /events:
    get:
      summary: Get all events
      responses:
        "200":
          description: List of events
    post:
      summary: Create an event
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                date:
                  type: string
                location:
                  type: object
                  properties:
                    address:
                      type: string
                    meetingLink:
                      type: string
                description:
                  type: string
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
      responses:
        "201":
          description: Event created
        "400":
          description: Request is malformed or missing some fields

  /events/{eventId}:
    get:
      summary: Get event details
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Event details
        "404":
          description: No such event occurs
    patch:
      summary: Update an event
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: Event updated
    delete:
      summary: Delete an event
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: Event deleted

  /events/{eventId}/publish:
    put:
      summary: Publish or unpublish an event
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string

  /tickets:
    get:
      summary: Get all tickets
      responses:
        "200":
          description: List of tickets
    post:
      summary: Create a ticket
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            properties:
              event:
                type: string
              name:
                type: string
              description:
                type: string
              price:
                type: number
              availableUntil:
                type: string
                format: date

      responses:
        "201":
          description: Ticket created successfully
        "403":
          description: User cannot create ticket for this event (they are not the organizer)
        "400":
          description: Malformed request body

  /tickets:/{ticketId}:
    get:
      summary: Get a ticket
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Retrieved ticket successfully
        "404":
          description: No ticket found with that Id
        "500":
          description: Error on the server side

    patch:
      summary: Modify a ticket
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
          schema:
            type: object
      responses:
        "200":
          description: Ticket modified successfully
        "400":
          description: Malformed request
        "404":
          description: No ticket with such Id exists
    delete:
      summary: Delete a ticket type
      parameters:
        - name: ticketId
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        "204":
          description: Ticket deleted successfully
        "404":
          description: No ticket with such Id exists
        "400":
          description: Malformed request

  /user/profile:
    get:
      summary: Get user profile
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User profile data
        "401":
          description: Unauthenticated, need to login
    put:
      summary: Update user profile
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            properties:
              name:
                type: string
              email:
                type: string
              userName:
                type: string
      responses:
        "200":
          description: Profile updated
        "401":
          description: Unauthenticated, need to login

  /user/{userId}:
    delete:
      summary: Delete User (only admin)
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          require: true
          in: path
          schema:
            type: string
      responses:
        "204":
          description: Successfully deleted the user
        "403":
          description: Not authorized to delete this user (require's admin privileges)
        "404":
          description: User  with the ID is not found
        "500":
          description: Error on the server side

  /user/{userId}/role:
    put:
      summary: Change user role
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
            properties:
              role:
                type: string

      parameters:
        - name: userId
          require: true
          in: path
          schema:
            type: string

      responses:
        "200":
          description: User role changed
        "403":
          description: Not authorized to change user roles
        "401":
          description: Unathenticated, needs login
        "400":
          description: Malformed request

  /user/all:
    get:
      summary: Get all Users
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of all users
        "403":
          description: Not authorized to view all users
        "401":
          description: Unauthenticated, needs login

  /registration:
    post:
      summary: Register for an event
      security:
        - BearerAuth: []
      requestBody:
        required: true,
        content:
          application/json:
            schema:
              type: object
            properties:
              event:
                type: string
              ticketType:
                type: string
              quantity:
                type: number
                minimum: 1
      responses:
        "201":
          description: Event Registration created (booked)
        "404":
          description: Event doesn't exist or tickets for this type are sold out

    get:
      summary: Get all registration for all events
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of all events and registrations
        "500":
          description: Internal server error

  /registration/{registrationId}:
    get:
      summary: Get details for a specific registration
      parameters:
        - name: registrationId
          required: true
          in: path
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Registration details for this specific reg
        "404":
          description: Registration with specified Id doesn't exist
        "500":
          description: Error on server side, its not your fault

    delete:
      summary: Cancel an event Registration
      parameters:
        - name: registrationId
          required: true
          in: path
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Event registration has been cancelled
        "404":
          description: Event doesn't exist
        "500":
          description: Error on the server side, its not your fault

    patch:
      summary: Update registration details (e.g ticket, payment etc)
      parameters:
        - name: registrationId
          required: true
          in: path
          schema:
            type: string
      security:
        - BearerAuth: []
      responses:
        "200":
          description: Event registration details updated
        "404":
          description: Registration with this Id doesn't exist
        "500":
          description: Issue on the server side, nothing you can do about it

  /registration/event/{eventId}:
    get: 
      summary:  Get registrations for a certain event 
      security:
        - BearerAuth: []
      parameters:
        - name: eventId
          in: path
          required: true
          schema:
            type: string
      responses: 
        "200": 
          description: Registration's for that event
        "404":
          description: No event with such Id
        "401":
          description: Unauthenicated, login needed
   
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
